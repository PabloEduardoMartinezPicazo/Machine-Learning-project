model,parameters,recall,score
vgg16," x0 = layers.Flatten()(base_model.output) x1 = layers.Dense(10, activation='relu')(x0) x2 = layers.Dropout(0.5)(x1) x3 = layers.Dense(5, activation='softmax')(x2) vgg16 = tf.keras.models.Model(base_model.input, x3) vgg16.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])",0.5525,0.9614670276641846
cnn1,"([keras.layers.Conv2D(filters=8,  kernel_size=(3, 3), input_shape=(100, 100, 3),  padding='same'),keras.layers.MaxPooling2D(pool_size=(2, 2),  padding=same),keras.layers.Dropout(0.25),keras.layers.Flatten(),  keras.layers.Dense(32, activation='relu'), keras.layers.Dense(5, activation=softmax)])",0.5544,0.9484679698944092
cnn2,"keras.layers.Conv2D(filters=8, kernel_size=(3, 3), input_shape=(100, 100, 3),padding='same',keras.layers.Flatten(), keras.layers.Dense(5, activation=softmax)",0.5548,0.8389043807983398
resnet50," x0 = layers.Flatten()(base_model.output) x1 = layers.Dense(10, activation='relu')(x0) x2 = layers.Dropout(0.5)(x1) x3 = layers.Dense(5, activation='softmax')(x2) resnet50 = tf.keras.models.Model(base_model.input, x3) resnet50.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])",0.5684,0.8175487518310547
